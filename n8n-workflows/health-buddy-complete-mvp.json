{
  "name": "Health Buddy Complete MVP",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "line-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook",
      "name": "LINE Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 400]
    },
    {
      "parameters": {
        "jsCode": "// Parse LINE events\nconst events = $input.item.json.body.events || [];\n\nif (events.length === 0) {\n  return [{json: {status: 'ok', message: 'No events'}}];\n}\n\nconst event = events[0];\nconst output = {\n  eventType: event.type,\n  userId: event.source?.userId,\n  groupId: event.source?.groupId,\n  isGroup: event.source?.type === 'group',\n  replyToken: event.replyToken,\n  message: event.message,\n  messageType: event.message?.type || '',\n  text: event.message?.text || '',\n  messageId: event.message?.id || '',\n  timestamp: new Date().toISOString()\n};\n\n// Detect intent from text\nif (output.messageType === 'text' && output.text) {\n  if (output.text.match(/‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß|‡∏ó‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß|‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß/i)) {\n    output.intent = 'MEDICATION_TAKEN';\n  } else if (output.text.match(/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô|‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô|bp|BP|\\d{2,3}\\/\\d{2,3}/i)) {\n    output.intent = 'VITALS_REPORT';\n  } else if (output.text.match(/‡∏ä‡πà‡∏ß‡∏¢|‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô|‡πÄ‡∏à‡πá‡∏ö|‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å|‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å|‡∏•‡πâ‡∏°/i)) {\n    output.intent = 'EMERGENCY';\n  } else if (output.text.match(/‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ|hello/i)) {\n    output.intent = 'GREETING';\n  } else if (output.text.match(/‡∏™‡∏£‡∏∏‡∏õ|‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô|report/i)) {\n    output.intent = 'REQUEST_REPORT';\n  } else {\n    output.intent = 'CHAT';\n  }\n} else if (output.messageType === 'image') {\n  output.intent = 'IMAGE';\n}\n\nreturn [output];"
      },
      "id": "parseEvent",
      "name": "Parse Event & Detect Intent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 400]
    },
    {
      "parameters": {
        "rules": [
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "MEDICATION_TAKEN"
                }
              ]
            },
            "renameOutput": true,
            "outputKey": "medication"
          },
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "VITALS_REPORT"
                }
              ]
            },
            "renameOutput": true,
            "outputKey": "vitals"
          },
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "EMERGENCY"
                }
              ]
            },
            "renameOutput": true,
            "outputKey": "emergency"
          },
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "IMAGE"
                }
              ]
            },
            "renameOutput": true,
            "outputKey": "image"
          },
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "CHAT"
                }
              ]
            },
            "renameOutput": true,
            "outputKey": "chat"
          },
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "REQUEST_REPORT"
                }
              ]
            },
            "renameOutput": true,
            "outputKey": "report"
          }
        ]
      },
      "id": "routeByIntent",
      "name": "Route by Intent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [650, 400]
    },
    {
      "parameters": {
        "jsCode": "// Handle medication logging\nconst userId = $json.userId;\nconst timestamp = new Date().toISOString();\n\nconst messages = [\n  {\n    type: 'text',\n    text: '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞\\n‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤! üíä',\n    quickReply: {\n      items: [\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'üìä ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',\n            text: '‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'\n          }\n        },\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'ü©∫ ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô',\n            text: '‡∏à‡∏∞‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô'\n          }\n        }\n      ]\n    }\n  }\n];\n\nreturn {\n  json: {\n    replyToken: $json.replyToken,\n    messages: messages,\n    log: {\n      type: 'medication',\n      userId: userId,\n      timestamp: timestamp\n    }\n  }\n};"
      },
      "id": "medicationHandler",
      "name": "Handle Medication",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 100]
    },
    {
      "parameters": {
        "jsCode": "// Parse and handle vitals report\nconst text = $json.text;\nconst userId = $json.userId;\nlet vitals = {};\nlet responseText = '';\nlet alertLevel = 'normal';\n\n// Parse blood pressure\nconst bpMatch = text.match(/(\\d{2,3})\\/(\\d{2,3})/);\nif (bpMatch) {\n  vitals.bp_systolic = parseInt(bpMatch[1]);\n  vitals.bp_diastolic = parseInt(bpMatch[2]);\n  \n  // Evaluate BP levels\n  if (vitals.bp_systolic >= 180 || vitals.bp_diastolic >= 110) {\n    alertLevel = 'critical';\n    responseText = `üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${vitals.bp_systolic}/${vitals.bp_diastolic} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å ‡πÇ‡∏ó‡∏£ 1669`;\n  } else if (vitals.bp_systolic >= 160 || vitals.bp_diastolic >= 100) {\n    alertLevel = 'high';\n    responseText = `üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${vitals.bp_systolic}/${vitals.bp_diastolic} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 2 ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏±‡πà‡∏á`;\n  } else if (vitals.bp_systolic >= 140 || vitals.bp_diastolic >= 90) {\n    alertLevel = 'warning';\n    responseText = `üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${vitals.bp_systolic}/${vitals.bp_diastolic} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 1 ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° ‡∏•‡∏î‡πÄ‡∏Ñ‡πá‡∏° ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠`;\n  } else if (vitals.bp_systolic < 90 || vitals.bp_diastolic < 60) {\n    alertLevel = 'warning';\n    responseText = `üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${vitals.bp_systolic}/${vitals.bp_diastolic} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏•‡∏∏‡∏Å‡∏ä‡πâ‡∏≤‡πÜ ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏´‡∏±‡∏ß ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå`;\n  } else {\n    responseText = `üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${vitals.bp_systolic}/${vitals.bp_diastolic} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞! ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏∞‡∏Ñ‡∏∞`;\n  }\n} else {\n  responseText = '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏°‡∏≤\\n‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô \"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô 120/80\" ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞';\n}\n\nconst quickReply = alertLevel === 'critical' || alertLevel === 'high' ? \n  {\n    items: [\n      {\n        type: 'action',\n        action: {\n          type: 'message',\n          label: 'üíä ‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß',\n          text: '‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß'\n        }\n      },\n      {\n        type: 'action',\n        action: {\n          type: 'uri',\n          label: 'üìû ‡πÇ‡∏ó‡∏£‡∏´‡∏°‡∏≠',\n          uri: 'tel:1669'\n        }\n      }\n    ]\n  } : \n  {\n    items: [\n      {\n        type: 'action',\n        action: {\n          type: 'message',\n          label: 'üíä ‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß',\n          text: '‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß'\n        }\n      },\n      {\n        type: 'action',\n        action: {\n          type: 'message',\n          label: 'üìä ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ',\n          text: '‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'\n        }\n      }\n    ]\n  };\n\nreturn {\n  json: {\n    replyToken: $json.replyToken,\n    messages: [{\n      type: 'text',\n      text: responseText,\n      quickReply: quickReply\n    }],\n    log: {\n      type: 'vitals',\n      userId: userId,\n      vitals: vitals,\n      alertLevel: alertLevel,\n      timestamp: new Date().toISOString()\n    }\n  }\n};"
      },
      "id": "vitalsHandler",
      "name": "Handle Vitals",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// Emergency handler\nconst userId = $json.userId;\nconst text = $json.text;\n\nconst messages = [\n  {\n    type: 'text',\n    text: 'üö® ‡πÑ‡∏î‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n\\n‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ\\n\\n‡∏´‡∏≤‡∏Å‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏°‡∏≤‡∏Å ‡πÇ‡∏ó‡∏£ 1669 ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞',\n    quickReply: {\n      items: [\n        {\n          type: 'action',\n          action: {\n            type: 'uri',\n            label: 'üìû ‡πÇ‡∏ó‡∏£ 1669',\n            uri: 'tel:1669'\n          }\n        },\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'üìç ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',\n            text: '‡∏Ç‡∏≠‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'\n          }\n        }\n      ]\n    }\n  }\n];\n\nreturn {\n  json: {\n    replyToken: $json.replyToken,\n    messages: messages,\n    alert: {\n      type: 'EMERGENCY',\n      userId: userId,\n      message: text,\n      severity: 'critical',\n      timestamp: new Date().toISOString()\n    }\n  }\n};"
      },
      "id": "emergencyHandler",
      "name": "Handle Emergency",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://api-data.line.me/v2/bot/message/{{ $json.messageId }}/content",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "responseFormat": "file",
        "options": {}
      },
      "id": "getImageFromLine",
      "name": "Get Image from LINE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 500],
      "credentials": {
        "httpHeaderAuth": {
          "id": "LINE_API_CREDENTIAL_ID",
          "name": "LINE API"
        }
      }
    },
    {
      "parameters": {
        "resource": "chatCompletion",
        "model": "gpt-4-vision-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏û‡∏•‡∏≠‡∏¢' ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï\n\n‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:\n1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ (SYS/DIA ‡πÅ‡∏•‡∏∞ Pulse ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\n2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô:\n   - ‡∏õ‡∏Å‡∏ï‡∏¥: < 120/80\n   - ‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢: 120-139/80-89\n   - ‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 1: 140-159/90-99\n   - ‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 2: 160-179/100-109\n   - ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï: ‚â• 180/110\n3. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:\nüìä ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: [SYS/DIA] mmHg\nüíì ‡∏ä‡∏µ‡∏û‡∏à‡∏£: [Pulse] ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\nüìà ‡∏£‡∏∞‡∏î‡∏±‡∏ö: [‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô]\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: [‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏±‡πâ‡∏ô‡πÜ 1-2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ]\n\n‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤:\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ñ‡πà‡∏∞\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ä‡∏±‡∏î‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞"
                },
                {
                  "type": "image_url",
                  "image_url": {
                    "url": "data:image/jpeg;base64,{{ $binary.data.data }}"
                  }
                }
              ]
            }
          ]
        },
        "options": {
          "maxTokens": 300,
          "temperature": 0.3
        }
      },
      "id": "analyzeImage",
      "name": "Analyze BP Image",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1100, 500],
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "resource": "chatCompletion",
        "model": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏û‡∏•‡∏≠‡∏¢' ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏ç‡∏¥‡∏á‡∏ß‡∏±‡∏¢ 30 ‡∏õ‡∏µ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏\n\n‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å:\n- ‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á\n- ‡∏û‡∏π‡∏î‡∏à‡∏≤‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ '‡∏Ñ‡πà‡∏∞' ‡πÄ‡∏™‡∏°‡∏≠\n- ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡∏´‡πà‡∏ß‡∏á‡πÉ‡∏¢\n\n‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:\n1. ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n2. ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n3. ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û\n\n‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°:\n- ‡∏´‡πâ‡∏≤‡∏°‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤\n- ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏°‡∏≠\n- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ"
            },
            {
              "role": "user",
              "content": "{{ $json.text }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 150
        }
      },
      "id": "aiChat",
      "name": "AI Chat (‡∏û‡∏•‡∏≠‡∏¢)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 600],
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_ID",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate daily report\nconst userId = $json.userId;\nconst today = new Date().toISOString().split('T')[0];\n\n// Mock report - in production, fetch from database\nconst report = {\n  date: today,\n  medication_compliance: '2/2 ‡∏°‡∏∑‡πâ‡∏≠',\n  vitals_latest: '120/80',\n  mood: 'üòä ‡∏î‡∏µ',\n  notes: '‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏Ñ‡∏£‡∏ö ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥'\n};\n\n// Create Flex Message\nconst flexMessage = {\n  type: 'flex',\n  altText: 'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',\n  contents: {\n    type: 'bubble',\n    header: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'text',\n          text: 'üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',\n          weight: 'bold',\n          size: 'lg'\n        },\n        {\n          type: 'text',\n          text: today,\n          size: 'sm',\n          color: '#999999'\n        }\n      ]\n    },\n    body: {\n      type: 'box',\n      layout: 'vertical',\n      spacing: 'md',\n      contents: [\n        {\n          type: 'box',\n          layout: 'horizontal',\n          contents: [\n            {\n              type: 'text',\n              text: 'üíä ‡∏¢‡∏≤:',\n              weight: 'bold',\n              flex: 2\n            },\n            {\n              type: 'text',\n              text: report.medication_compliance,\n              flex: 3\n            }\n          ]\n        },\n        {\n          type: 'box',\n          layout: 'horizontal',\n          contents: [\n            {\n              type: 'text',\n              text: 'ü©∫ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô:',\n              weight: 'bold',\n              flex: 2\n            },\n            {\n              type: 'text',\n              text: report.vitals_latest,\n              flex: 3\n            }\n          ]\n        },\n        {\n          type: 'box',\n          layout: 'horizontal',\n          contents: [\n            {\n              type: 'text',\n              text: 'üòä ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå:',\n              weight: 'bold',\n              flex: 2\n            },\n            {\n              type: 'text',\n              text: report.mood,\n              flex: 3\n            }\n          ]\n        },\n        {\n          type: 'separator',\n          margin: 'md'\n        },\n        {\n          type: 'text',\n          text: 'üí° ' + report.notes,\n          wrap: true,\n          size: 'sm',\n          color: '#666666'\n        }\n      ]\n    },\n    footer: {\n      type: 'box',\n      layout: 'vertical',\n      contents: [\n        {\n          type: 'button',\n          action: {\n            type: 'message',\n            label: '‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß',\n            text: '‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß'\n          },\n          style: 'primary',\n          color: '#17C950'\n        }\n      ]\n    }\n  }\n};\n\nreturn {\n  json: {\n    replyToken: $json.replyToken,\n    messages: [flexMessage]\n  }\n};"
      },
      "id": "reportHandler",
      "name": "Generate Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 700]
    },
    {
      "parameters": {
        "jsCode": "// Format response based on type\nconst input = $json;\nlet output = {};\n\n// Check if it's from image analysis\nif (input.choices && input.choices[0]) {\n  const content = input.choices[0].message.content;\n  output = {\n    replyToken: $input.all()[0].json.replyToken,\n    messages: [{\n      type: 'text',\n      text: content,\n      quickReply: {\n        items: [\n          {\n            type: 'action',\n            action: {\n              type: 'message',\n              label: 'üíä ‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß',\n              text: '‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞'\n            }\n          },\n          {\n            type: 'action',\n            action: {\n              type: 'message',\n              label: 'üìä ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ',\n              text: '‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'\n            }\n          }\n        ]\n      }\n    }]\n  };\n} else if (input.messages) {\n  // Already formatted\n  output = input;\n} else {\n  // Default\n  output = {\n    replyToken: input.replyToken,\n    messages: input.messages || [{\n      type: 'text',\n      text: '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á'\n    }]\n  };\n}\n\nreturn { json: output };"
      },
      "id": "formatResponse",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.line.me/v2/bot/message/reply",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "lineReply",
      "name": "LINE Reply",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1500, 400],
      "credentials": {
        "httpHeaderAuth": {
          "id": "LINE_API_CREDENTIAL_ID",
          "name": "LINE API"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"ok\" } }}",
        "options": {}
      },
      "id": "respond",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1700, 400]
    },
    {
      "parameters": {
        "content": "## üéØ Health Buddy Complete MVP\n\n### ‚úÖ Features:\n1. **Medication Tracking** - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤\n2. **Vitals Monitoring** - ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (‡∏û‡∏¥‡∏°‡∏û‡πå/‡∏£‡∏π‡∏õ)\n3. **Emergency Alert** - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô\n4. **AI Chat** - ‡∏û‡∏•‡∏≠‡∏¢ ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• AI\n5. **Image Analysis** - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô\n6. **Daily Report** - ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô\n\n### üìù Setup:\n1. Add **LINE API** credential\n2. Add **OpenAI** credential\n3. Set webhook path: `line-webhook`\n4. Activate workflow\n\n### üß™ Test Commands:\n- \"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ\" - Greeting\n- \"‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß\" - Log medication\n- \"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô 120/80\" - Log BP\n- ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô - Analyze image\n- \"‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ\" - Daily report\n- \"‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏ß‡∏¢\" - Emergency",
        "height": 400,
        "width": 350
      },
      "id": "note",
      "name": "Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [180, 50]
    }
  ],
  "connections": {
    "webhook": {
      "main": [
        [
          {
            "node": "parseEvent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parseEvent": {
      "main": [
        [
          {
            "node": "routeByIntent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "routeByIntent": {
      "main": [
        [
          {
            "node": "medicationHandler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "vitalsHandler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "emergencyHandler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "getImageFromLine",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "aiChat",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "reportHandler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "medicationHandler": {
      "main": [
        [
          {
            "node": "formatResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "vitalsHandler": {
      "main": [
        [
          {
            "node": "formatResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "emergencyHandler": {
      "main": [
        [
          {
            "node": "formatResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getImageFromLine": {
      "main": [
        [
          {
            "node": "analyzeImage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyzeImage": {
      "main": [
        [
          {
            "node": "formatResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "aiChat": {
      "main": [
        [
          {
            "node": "formatResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reportHandler": {
      "main": [
        [
          {
            "node": "formatResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatResponse": {
      "main": [
        [
          {
            "node": "lineReply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "lineReply": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateId": "health-buddy-mvp"
  }
}