{
  "name": "Health Buddy MVP with AI",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "line-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook",
      "name": "LINE Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "// Parse LINE events\nconst events = $input.item.json.body.events || [];\n\nif (events.length === 0) {\n  return [{json: {status: 'ok', message: 'No events'}}];\n}\n\nconst event = events[0];\nconst output = {\n  eventType: event.type,\n  userId: event.source?.userId,\n  groupId: event.source?.groupId,\n  isGroup: event.source?.type === 'group',\n  replyToken: event.replyToken,\n  message: event.message,\n  text: event.message?.text || '',\n  timestamp: new Date().toISOString()\n};\n\n// Detect intent from text\nif (output.text) {\n  if (output.text.match(/‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß|‡∏ó‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß|‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß/i)) {\n    output.intent = 'MEDICATION_TAKEN';\n  } else if (output.text.match(/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô|‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô|bp|BP|\\d{2,3}\\/\\d{2,3}/i)) {\n    output.intent = 'VITALS_REPORT';\n  } else if (output.text.match(/‡∏ä‡πà‡∏ß‡∏¢|‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô|‡πÄ‡∏à‡πá‡∏ö|‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å|‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å|‡∏•‡πâ‡∏°/i)) {\n    output.intent = 'EMERGENCY';\n  } else if (output.text.match(/‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ|hello/i)) {\n    output.intent = 'GREETING';\n  } else {\n    output.intent = 'CHAT';\n  }\n}\n\nreturn [output];"
      },
      "id": "parseEvent",
      "name": "Parse Event & Detect Intent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "rules": [
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "MEDICATION_TAKEN"
                }
              ]
            }
          },
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "VITALS_REPORT"
                }
              ]
            }
          },
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "EMERGENCY"
                }
              ]
            }
          },
          {
            "dataPropertyName": "intent",
            "operations": {
              "conditions": [
                {
                  "value1": "={{ $json.intent }}",
                  "value2": "CHAT"
                }
              ]
            }
          }
        ]
      },
      "id": "switch",
      "name": "Route by Intent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "resource": "chatCompletion",
        "model": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏û‡∏•‡∏≠‡∏¢' ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏ç‡∏¥‡∏á‡∏ß‡∏±‡∏¢ 30 ‡∏õ‡∏µ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏\n\n‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å:\n- ‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á\n- ‡∏û‡∏π‡∏î‡∏à‡∏≤‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ '‡∏Ñ‡πà‡∏∞' ‡πÄ‡∏™‡∏°‡∏≠\n- ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå\n\n‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:\n1. ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤\n2. ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô\n3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û\n4. ‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô (‡πÅ‡∏ï‡πà‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ)\n\n‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°:\n- ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå\n- ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏°‡∏≠\n- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"
            },
            {
              "role": "user", 
              "content": "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: {{ $json.text }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 150
        }
      },
      "id": "openai",
      "name": "AI Chat (‡∏û‡∏•‡∏≠‡∏¢)",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [850, 400],
      "credentials": {
        "openAiApi": {
          "id": "1",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log medication to Supabase\nconst userId = $input.item.json.userId;\nconst timestamp = new Date().toISOString();\n\n// Prepare response\nconst messages = [\n  {\n    type: 'text',\n    text: '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞\\n‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤! üíä',\n    quickReply: {\n      items: [\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'üìä ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',\n            text: '‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'\n          }\n        },\n        {\n          type: 'action', \n          action: {\n            type: 'message',\n            label: 'ü©∫ ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô',\n            text: '‡∏à‡∏∞‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô'\n          }\n        }\n      ]\n    }\n  }\n];\n\nreturn {\n  json: {\n    replyToken: $input.item.json.replyToken,\n    messages: messages,\n    log: {\n      type: 'medication',\n      userId: userId,\n      timestamp: timestamp\n    }\n  }\n};"
      },
      "id": "medicationHandler",
      "name": "Handle Medication",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 100]
    },
    {
      "parameters": {
        "jsCode": "// Parse vitals from text\nconst text = $input.item.json.text;\nconst userId = $input.item.json.userId;\nlet vitals = {};\nlet responseText = '';\n\n// Parse blood pressure\nconst bpMatch = text.match(/(\\d{2,3})\\/(\\d{2,3})/);\nif (bpMatch) {\n  vitals.bp_systolic = parseInt(bpMatch[1]);\n  vitals.bp_diastolic = parseInt(bpMatch[2]);\n  \n  // Check if normal\n  if (vitals.bp_systolic > 140 || vitals.bp_diastolic > 90) {\n    responseText = `üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${vitals.bp_systolic}/${vitals.bp_diastolic} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ`;\n  } else {\n    responseText = `üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô ${vitals.bp_systolic}/${vitals.bp_diastolic} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞!`;\n  }\n} else {\n  responseText = '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏°‡∏≤\\n‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô \"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô 120/80\" ‡∏Ñ‡πà‡∏∞';\n}\n\nreturn {\n  json: {\n    replyToken: $input.item.json.replyToken,\n    messages: [{\n      type: 'text',\n      text: responseText\n    }],\n    log: {\n      type: 'vitals',\n      userId: userId,\n      vitals: vitals,\n      timestamp: new Date().toISOString()\n    }\n  }\n};"
      },
      "id": "vitalsHandler",
      "name": "Handle Vitals",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 200]
    },
    {
      "parameters": {
        "jsCode": "// Emergency handler\nconst userId = $input.item.json.userId;\nconst text = $input.item.json.text;\n\nconst messages = [\n  {\n    type: 'text',\n    text: 'üö® ‡πÑ‡∏î‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n\\n‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ\\n\\n‡∏´‡∏≤‡∏Å‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏°‡∏≤‡∏Å ‡πÇ‡∏ó‡∏£ 1669 ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞'\n  }\n];\n\n// TODO: Send alert to caregivers via separate API call\n\nreturn {\n  json: {\n    replyToken: $input.item.json.replyToken,\n    messages: messages,\n    alert: {\n      type: 'EMERGENCY',\n      userId: userId,\n      message: text,\n      severity: 'critical',\n      timestamp: new Date().toISOString()\n    }\n  }\n};"
      },
      "id": "emergencyHandler",
      "name": "Handle Emergency",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format AI response for LINE reply\nconst aiResponse = $input.item.json.choices[0].message.content;\nconst replyToken = $input.all()[0].json.replyToken;\n\nconst messages = [\n  {\n    type: 'text',\n    text: aiResponse,\n    quickReply: {\n      items: [\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'üíä ‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß',\n            text: '‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß'\n          }\n        },\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'ü©∫ ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô',\n            text: '‡∏à‡∏∞‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô'\n          }\n        },\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'üìä ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ',\n            text: '‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'\n          }\n        }\n      ]\n    }\n  }\n];\n\nreturn {\n  json: {\n    replyToken: replyToken,\n    messages: messages\n  }\n};"
      },
      "id": "formatAIResponse",
      "name": "Format AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.line.me/v2/bot/message/reply",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "lineReply",
      "name": "LINE Reply",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1250, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "LINE API"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"ok\" } }}",
        "options": {}
      },
      "id": "respond",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "content": "## üéØ Health Buddy MVP with AI\n\n### Features:\n1. **Intent Detection** - ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n2. **AI Chat** - ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ GPT (‡∏û‡∏•‡∏≠‡∏¢ persona)\n3. **Medication Log** - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤\n4. **Vitals Log** - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô\n5. **Emergency Alert** - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô\n6. **Quick Reply** - ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πà‡∏ß‡∏ô\n\n### Setup Required:\n1. Add OpenAI API credential\n2. Add LINE API credential\n3. Configure Supabase (optional)\n4. Activate workflow",
        "height": 280,
        "width": 350
      },
      "id": "note",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [180, 50]
    }
  ],
  "connections": {
    "webhook": {
      "main": [
        [
          {
            "node": "parseEvent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "parseEvent": {
      "main": [
        [
          {
            "node": "switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "switch": {
      "main": [
        [
          {
            "node": "medicationHandler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "vitalsHandler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "emergencyHandler",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "openai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "medicationHandler": {
      "main": [
        [
          {
            "node": "lineReply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "vitalsHandler": {
      "main": [
        [
          {
            "node": "lineReply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "emergencyHandler": {
      "main": [
        [
          {
            "node": "lineReply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai": {
      "main": [
        [
          {
            "node": "formatAIResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatAIResponse": {
      "main": [
        [
          {
            "node": "lineReply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "lineReply": {
      "main": [
        [
          {
            "node": "respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}