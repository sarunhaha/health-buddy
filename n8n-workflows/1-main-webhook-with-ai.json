{
  "name": "1. Main Webhook with AI & Conversational Registration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "line-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook_entry",
      "name": "LINE Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 500],
      "webhookId": "line-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Parse LINE webhook event\nconst event = $json.events?.[0];\n\nif (!event) {\n  return { error: 'No event data' };\n}\n\nreturn {\n  eventType: event.type,\n  messageType: event.message?.type || '',\n  messageText: event.message?.text || '',\n  userId: event.source?.userId || '',\n  groupId: event.source?.groupId || '',\n  roomId: event.source?.roomId || '',\n  replyToken: event.replyToken || '',\n  isGroup: event.source?.type === 'group',\n  isUser: event.source?.type === 'user',\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "parse_event",
      "name": "Parse Event",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 500]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.eventType }}",
              "value2": "message"
            }
          ]
        }
      },
      "id": "is_message",
      "name": "Is Message?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [650, 500]
    },
    {
      "parameters": {
        "jsCode": "// Detect intent from message\nconst text = $json.messageText.toLowerCase();\nconst userId = $json.userId;\nconst groupId = $json.groupId;\n\n// Registration keywords\nif (text.includes('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô') || text === 'register' || text === '‡∏™‡∏°‡∏±‡∏Ñ‡∏£') {\n  return {\n    intent: 'registration',\n    confidence: 1.0,\n    ...$ json\n  };\n}\n\n// Connection code pattern (XXXX-9999 or #connect XXXX-9999)\nconst codePattern = /^(#connect\\s+)?([A-Z0-9]{4}-\\d{4})$/i;\nif (codePattern.test(text.trim())) {\n  return {\n    intent: 'connect',\n    connectionCode: text.match(codePattern)[2],\n    confidence: 1.0,\n    ...$json\n  };\n}\n\n// Health logging keywords\nif (text.includes('‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤') || text.includes('‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤')) {\n  return { intent: 'medication', confidence: 0.9, ...$json };\n}\n\nif (text.includes('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô') || text.match(/\\d+\\/\\d+/)) {\n  return { intent: 'blood_pressure', confidence: 0.9, ...$json };\n}\n\nif (text.includes('‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•')) {\n  return { intent: 'glucose', confidence: 0.9, ...$json };\n}\n\nif (text.includes('‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥') || text.includes('‡∏ô‡πâ‡∏≥')) {\n  return { intent: 'water', confidence: 0.8, ...$json };\n}\n\nif (text.includes('‡πÄ‡∏î‡∏¥‡∏ô') || text.includes('‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á')) {\n  return { intent: 'exercise', confidence: 0.8, ...$json };\n}\n\n// Report request\nif (text.includes('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô') || text.includes('‡∏™‡∏£‡∏∏‡∏õ') || text === '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô') {\n  return { intent: 'report', confidence: 0.9, ...$json };\n}\n\n// Help request\nif (text === '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' || text === 'help') {\n  return { intent: 'help', confidence: 1.0, ...$json };\n}\n\n// Emergency keywords\nconst emergencyWords = ['‡∏ä‡πà‡∏ß‡∏¢', '‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å', '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å', '‡∏•‡πâ‡∏°', '‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô'];\nif (emergencyWords.some(word => text.includes(word))) {\n  return { intent: 'emergency', confidence: 1.0, ...$json };\n}\n\n// Default: Send to AI chat\nreturn {\n  intent: 'ai_chat',\n  confidence: 0.5,\n  ...$json\n};"
      },
      "id": "detect_intent",
      "name": "Detect Intent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 450]
    },
    {
      "parameters": {
        "rules": [
          {
            "field": "={{ $json.intent }}",
            "operation": "equals",
            "value": "registration"
          },
          {
            "field": "={{ $json.intent }}",
            "operation": "equals",
            "value": "connect"
          },
          {
            "field": "={{ $json.intent }}",
            "operation": "equals",
            "value": "medication"
          },
          {
            "field": "={{ $json.intent }}",
            "operation": "equals",
            "value": "blood_pressure"
          },
          {
            "field": "={{ $json.intent }}",
            "operation": "equals",
            "value": "emergency"
          },
          {
            "field": "={{ $json.intent }}",
            "operation": "equals",
            "value": "ai_chat"
          }
        ]
      },
      "id": "route_intent",
      "name": "Route by Intent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [1050, 500]
    },
    {
      "parameters": {
        "resource": "record",
        "operation": "search",
        "base": {
          "__rl": true,
          "mode": "id",
          "value": "app3u0M9H6SsZ0J6s"
        },
        "table": {
          "__rl": true,
          "mode": "id",
          "value": "tblpQeph1tVbhyhbW"
        },
        "filterByFormula": "={{ \"AND(FIND('\" + $json.userId + \"', {patientId}) > 0, FIND('REGISTRATION:', {note}) > 0)\" }}",
        "sort": [
          {
            "field": "timestamp",
            "direction": "desc"
          }
        ],
        "limit": 1
      },
      "id": "get_reg_state",
      "name": "Get Registration State",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1250, 200],
      "credentials": {
        "airtableTokenApi": {
          "id": "1",
          "name": "Airtable API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Conversational Registration State Machine\nconst userId = $json.userId;\nconst userMessage = $json.messageText;\nconst lastConvo = $items[0]?.json?.fields || {};\n\n// Parse state from last conversation\nlet currentState = 'START';\nlet regData = {};\n\nif (lastConvo.note) {\n  const match = lastConvo.note.match(/REGISTRATION:STATE:(\\w+):DATA:(.+)/);\n  if (match) {\n    currentState = match[1];\n    try {\n      regData = JSON.parse(match[2]);\n    } catch (e) {\n      regData = {};\n    }\n  }\n}\n\n// Reset if starting new registration\nif (userMessage === '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' && currentState !== 'START') {\n  currentState = 'START';\n  regData = {};\n}\n\n// State transitions\nlet nextState = currentState;\nlet response = '';\nlet quickReply = null;\nlet shouldComplete = false;\n\nswitch(currentState) {\n  case 'START':\n    nextState = 'ASK_NAME';\n    response = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Health Buddy üè•\\n\\n‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏û‡∏•‡∏≠‡∏¢ ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• AI ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡πà‡∏∞\\n\\n‡∏Ç‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏∞\\n(‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏®‡∏£‡∏µ ‡πÉ‡∏à‡∏î‡∏µ)`;\n    break;\n    \n  case 'ASK_NAME':\n    if (userMessage === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') {\n      nextState = 'CANCELLED';\n      response = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞';\n    } else {\n      regData.patientName = userMessage;\n      nextState = 'ASK_NICKNAME';\n      response = `‡∏Ç‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏∏‡∏ì${userMessage.split(' ')[0]}‡∏Ñ‡πà‡∏∞\\n(‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏≤‡∏¢, ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà, ‡∏Ñ‡∏∏‡∏ì‡∏û‡πà‡∏≠)`;\n    }\n    break;\n    \n  case 'ASK_NICKNAME':\n    regData.displayName = userMessage;\n    nextState = 'ASK_GENDER';\n    response = `‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á${userMessage}‡∏Ñ‡πà‡∏∞`;\n    quickReply = {\n      items: [\n        {type: \"action\", action: {type: \"message\", label: \"üë® ‡∏ä‡∏≤‡∏¢\", text: \"‡∏ä‡∏≤‡∏¢\"}},\n        {type: \"action\", action: {type: \"message\", label: \"üë© ‡∏´‡∏ç‡∏¥‡∏á\", text: \"‡∏´‡∏ç‡∏¥‡∏á\"}}\n      ]\n    };\n    break;\n    \n  case 'ASK_GENDER':\n    regData.gender = userMessage === '‡∏ä‡∏≤‡∏¢' ? 'male' : 'female';\n    nextState = 'ASK_DOB';\n    response = `‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á${regData.displayName}‡∏Ñ‡πà‡∏∞\\n(‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ß‡∏ß/‡∏î‡∏î/‡∏õ‡∏õ‡∏õ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô 01/05/2498)`;\n    break;\n    \n  case 'ASK_DOB':\n    const datePattern = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\n    if (!datePattern.test(userMessage)) {\n      response = `‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏ß/‡∏î‡∏î/‡∏õ‡∏õ‡∏õ‡∏õ\\n‡πÄ‡∏ä‡πà‡∏ô 01/05/2498 ‡∏Ñ‡πà‡∏∞`;\n    } else {\n      const [d, m, y] = userMessage.split('/');\n      regData.dateOfBirth = `${parseInt(y)-543}-${m}-${d}`;\n      nextState = 'ASK_DISEASES';\n      response = `${regData.displayName}‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞`;\n      quickReply = {\n        items: [\n          {type: \"action\", action: {type: \"message\", label: \"ü©∏ ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô\", text: \"‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô\"}},\n          {type: \"action\", action: {type: \"message\", label: \"üíä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô\", text: \"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô\"}},\n          {type: \"action\", action: {type: \"message\", label: \"‚ù§Ô∏è ‡∏´‡∏±‡∏ß‡πÉ‡∏à\", text: \"‡∏´‡∏±‡∏ß‡πÉ‡∏à\"}},\n          {type: \"action\", action: {type: \"message\", label: \"‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ\", text: \"‡πÑ‡∏°‡πà‡∏°‡∏µ\"}}\n        ]\n      };\n    }\n    break;\n    \n  case 'ASK_DISEASES':\n    regData.chronicDiseases = userMessage === '‡πÑ‡∏°‡πà‡∏°‡∏µ' ? [] : [userMessage];\n    nextState = 'ASK_MEDICATIONS';\n    response = `‡∏°‡∏µ‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞\\n(‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå \"‡πÑ‡∏°‡πà‡∏°‡∏µ\")`;\n    break;\n    \n  case 'ASK_MEDICATIONS':\n    if (userMessage !== '‡πÑ‡∏°‡πà‡∏°‡∏µ') {\n      regData.medications = [{drug: userMessage, time: \"08:00\"}];\n    } else {\n      regData.medications = [];\n    }\n    nextState = 'ASK_CAREGIVER';\n    response = '‡∏Ç‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡πà‡∏∞';\n    break;\n    \n  case 'ASK_CAREGIVER':\n    regData.caregiverName = userMessage;\n    nextState = 'ASK_RELATIONSHIP';\n    response = `${userMessage}‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö${regData.displayName}‡∏Ñ‡∏∞`;\n    quickReply = {\n      items: [\n        {type: \"action\", action: {type: \"message\", label: \"üë®‚Äçüë©‚Äçüë¶ ‡∏•‡∏π‡∏Å\", text: \"‡∏•‡∏π‡∏Å\"}},\n        {type: \"action\", action: {type: \"message\", label: \"üë∂ ‡∏´‡∏•‡∏≤‡∏ô\", text: \"‡∏´‡∏•‡∏≤‡∏ô\"}},\n        {type: \"action\", action: {type: \"message\", label: \"üíë ‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™\", text: \"‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏£‡∏™\"}},\n        {type: \"action\", action: {type: \"message\", label: \"üë• ‡∏ç‡∏≤‡∏ï‡∏¥\", text: \"‡∏ç‡∏≤‡∏ï‡∏¥\"}}\n      ]\n    };\n    break;\n    \n  case 'ASK_RELATIONSHIP':\n    regData.caregiverRelation = userMessage;\n    nextState = 'ASK_PHONE';\n    response = `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡πà‡∏∞\\n(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)`;\n    break;\n    \n  case 'ASK_PHONE':\n    regData.caregiverPhone = userMessage;\n    nextState = 'CONFIRM';\n    const age = Math.floor((Date.now() - new Date(regData.dateOfBirth)) / (365*24*60*60*1000));\n    response = `‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n\\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\\nüë§ ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏: ${regData.displayName} (${regData.patientName})\\nüìÖ ‡∏≠‡∏≤‡∏¢‡∏∏: ${age} ‡∏õ‡∏µ\\nüíä ‡πÇ‡∏£‡∏Ñ: ${regData.chronicDiseases.join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}\\nüë© ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•: ${regData.caregiverName} (${regData.caregiverRelation})\\nüìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${regData.caregiverPhone}\\n\\n‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\\n‡∏´‡∏£‡∏∑‡∏≠ \"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà`;\n    break;\n    \n  case 'CONFIRM':\n    if (userMessage === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' || userMessage.includes('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')) {\n      nextState = 'COMPLETED';\n      shouldComplete = true;\n      const code = Math.random().toString(36).substring(2,6).toUpperCase() + '-' + Math.floor(Math.random() * 9000 + 1000);\n      regData.connectionCode = code;\n      response = `üéä ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\\n\\nüë§ ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏: ${regData.displayName}\\nüîë ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${code}\\n\\nüìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:\\n1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° LINE ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß\\n2. ‡πÄ‡∏ä‡∏¥‡∏ç Health Buddy ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°\\n3. ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏´‡∏±‡∏™ ${code} ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°\\n4. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\\n\\n‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ 7 ‡∏ß‡∏±‡∏ô`;\n    } else if (userMessage === '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç') {\n      nextState = 'ASK_NAME';\n      regData = {};\n      response = '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞\\n\\n‡∏Ç‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡πà‡∏∞';\n    } else {\n      response = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô\" ‡∏´‡∏£‡∏∑‡∏≠ \"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\" ‡∏Ñ‡πà‡∏∞';\n    }\n    break;\n}\n\n// Handle cancel\nif (userMessage === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' && currentState !== 'START') {\n  nextState = 'CANCELLED';\n  response = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\" ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞';\n}\n\n// Save state\nconst stateNote = `REGISTRATION:STATE:${nextState}:DATA:${JSON.stringify(regData)}`;\n\nreturn {\n  userId,\n  currentState,\n  nextState,\n  response,\n  quickReply,\n  stateNote,\n  regData,\n  shouldComplete,\n  shouldSaveState: nextState !== 'COMPLETED' && nextState !== 'CANCELLED'\n};"
      },
      "id": "registration_flow",
      "name": "Registration State Machine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "resource": "record",
        "operation": "search",
        "base": {
          "__rl": true,
          "mode": "id",
          "value": "app3u0M9H6SsZ0J6s"
        },
        "table": {
          "__rl": true,
          "mode": "id",
          "value": "tblIJdbBY1D0l5AK7"
        },
        "filterByFormula": "={{ \"OR({fldjwWUSWBWlfkiEV} = '\" + $json.groupId + \"', FIND('\" + $json.userId + \"', {fld1iFRDYXPh4kzVX}) > 0)\" }}",
        "limit": 1
      },
      "id": "find_patient",
      "name": "Find Patient Profile",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [1250, 700],
      "credentials": {
        "airtableTokenApi": {
          "id": "1",
          "name": "Airtable API"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-3.5-turbo"
        },
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏û‡∏•‡∏≠‡∏¢' ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• AI ‡∏Ç‡∏≠‡∏á Health Buddy ‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏\n\n‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å:\n- ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ 30 ‡∏õ‡∏µ ‡πÉ‡∏à‡∏î‡∏µ ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô\n- ‡∏û‡∏π‡∏î‡∏à‡∏≤‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ '‡∏Ñ‡πà‡∏∞' ‡πÄ‡∏™‡∏°‡∏≠\n- ‡∏´‡πà‡∏ß‡∏á‡πÉ‡∏¢‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏û‡∏π‡∏î‡∏à‡∏≤‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô\n- ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡πÜ\n\n‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:\n1. ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\n2. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô\n3. ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à\n4. ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û\n\n‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°:\n- ‡πÑ‡∏°‡πà‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ\n- ‡πÑ‡∏°‡πà‡∏™‡∏±‡πà‡∏á‡∏¢‡∏≤\n- ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏±‡πà‡∏á\n- ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå\n\n‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ"
            },
            {
              "role": "user",
              "content": "={{ $json.messageText }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 150
        }
      },
      "id": "openai_chat",
      "name": "AI Chat (‡∏û‡∏•‡∏≠‡∏¢)",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [1450, 700],
      "credentials": {
        "openAiApi": {
          "id": "2",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build LINE reply message\nconst intent = $node['Detect Intent'].json.intent;\nconst replyToken = $node['Parse Event'].json.replyToken;\nlet messages = [];\nlet quickReply = null;\n\n// Route based on intent\nswitch(intent) {\n  case 'registration':\n    const regResponse = $node['Registration State Machine'].json;\n    messages.push({\n      type: 'text',\n      text: regResponse.response\n    });\n    if (regResponse.quickReply) {\n      messages[0].quickReply = regResponse.quickReply;\n    }\n    break;\n    \n  case 'medication':\n    messages.push({\n      type: 'text',\n      text: '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞\\n‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞! üíä',\n      quickReply: {\n        items: [\n          {type: \"action\", action: {type: \"message\", label: \"üìä ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô\", text: \"‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô\"}},\n          {type: \"action\", action: {type: \"message\", label: \"üí¨ ‡∏Ñ‡∏∏‡∏¢‡∏ï‡πà‡∏≠\", text: \"‡∏™‡∏ö‡∏≤‡∏¢‡∏î‡∏µ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞\"}}\n        ]\n      }\n    });\n    break;\n    \n  case 'blood_pressure':\n    const bpMatch = $json.messageText.match(/(\\d+)\\/(\\d+)/);\n    if (bpMatch) {\n      const sys = parseInt(bpMatch[1]);\n      const dia = parseInt(bpMatch[2]);\n      let assessment = '';\n      \n      if (sys < 120 && dia < 80) {\n        assessment = '‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‚úÖ';\n      } else if (sys < 140 && dia < 90) {\n        assessment = '‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á ‚ö†Ô∏è';\n      } else {\n        assessment = '‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå üî¥';\n      }\n      \n      messages.push({\n        type: 'text',\n        text: `üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞\\n\\n‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: ${sys}/${dia} mmHg\\n‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${assessment}`\n      });\n    }\n    break;\n    \n  case 'emergency':\n    messages.push({\n      type: 'text',\n      text: 'üö® ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô!\\n\\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:\\nüìû 1669 (‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)\\n\\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•...'\n    });\n    break;\n    \n  case 'ai_chat':\n    const aiResponse = $items[0]?.json?.output || '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏•‡∏≠‡∏¢‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞';\n    messages.push({\n      type: 'text',\n      text: aiResponse,\n      quickReply: {\n        items: [\n          {type: \"action\", action: {type: \"message\", label: \"üíä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≤\", text: \"‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß\"}},\n          {type: \"action\", action: {type: \"message\", label: \"üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô\", text: \"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô\"}},\n          {type: \"action\", action: {type: \"message\", label: \"üìà ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô\", text: \"‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô\"}}\n        ]\n      }\n    });\n    break;\n    \n  default:\n    messages.push({\n      type: 'text',\n      text: '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞'\n    });\n}\n\nreturn {\n  replyToken,\n  messages\n};"
      },
      "id": "build_reply",
      "name": "Build Reply Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 500]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "reply",
        "replyToken": "={{ $json.replyToken }}",
        "messages": "={{ $json.messages }}"
      },
      "id": "line_reply",
      "name": "LINE Reply",
      "type": "n8n-nodes-base.line",
      "typeVersion": 1,
      "position": [2050, 500],
      "credentials": {
        "lineNotifyApi": {
          "id": "3",
          "name": "LINE Messaging API"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "webhook_response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2250, 500]
    }
  ],
  "connections": {
    "LINE Webhook": {
      "main": [[{"node": "Parse Event", "type": "main", "index": 0}]]
    },
    "Parse Event": {
      "main": [[{"node": "Is Message?", "type": "main", "index": 0}]]
    },
    "Is Message?": {
      "main": [
        [{"node": "Detect Intent", "type": "main", "index": 0}],
        [{"node": "Webhook Response", "type": "main", "index": 0}]
      ]
    },
    "Detect Intent": {
      "main": [[{"node": "Route by Intent", "type": "main", "index": 0}]]
    },
    "Route by Intent": {
      "main": [
        [{"node": "Get Registration State", "type": "main", "index": 0}],
        [{"node": "Find Patient Profile", "type": "main", "index": 0}],
        [{"node": "Build Reply Message", "type": "main", "index": 0}],
        [{"node": "Build Reply Message", "type": "main", "index": 0}],
        [{"node": "Build Reply Message", "type": "main", "index": 0}],
        [{"node": "AI Chat (‡∏û‡∏•‡∏≠‡∏¢)", "type": "main", "index": 0}]
      ]
    },
    "Get Registration State": {
      "main": [[{"node": "Registration State Machine", "type": "main", "index": 0}]]
    },
    "Registration State Machine": {
      "main": [[{"node": "Build Reply Message", "type": "main", "index": 0}]]
    },
    "Find Patient Profile": {
      "main": [[{"node": "AI Chat (‡∏û‡∏•‡∏≠‡∏¢)", "type": "main", "index": 0}]]
    },
    "AI Chat (‡∏û‡∏•‡∏≠‡∏¢)": {
      "main": [[{"node": "Build Reply Message", "type": "main", "index": 0}]]
    },
    "Build Reply Message": {
      "main": [[{"node": "LINE Reply", "type": "main", "index": 0}]]
    },
    "LINE Reply": {
      "main": [[{"node": "Webhook Response", "type": "main", "index": 0}]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "instanceId": "health-buddy-main-with-ai"
  }
}