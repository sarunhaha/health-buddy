{
  "name": "Image Analysis Node (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô workflow)",
  "description": "Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô workflow ‡∏´‡∏•‡∏±‡∏Å",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false
          },
          "conditions": [
            {
              "leftValue": "={{ $json.message.type }}",
              "rightValue": "image",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "ifImage",
      "name": "If Image Message",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [650, 500],
      "description": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://api-data.line.me/v2/bot/message/{{ $json.message.id }}/content",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "responseFormat": "file",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "getImageFromLine",
      "name": "Get Image from LINE",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 500],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "LINE API"
        }
      },
      "description": "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å LINE"
    },
    {
      "parameters": {
        "resource": "chatCompletion",
        "model": "gpt-4-vision-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏û‡∏•‡∏≠‡∏¢' ‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï\n\n‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:\n1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ (SYS/DIA)\n2. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô:\n   - ‡∏õ‡∏Å‡∏ï‡∏¥: < 120/80\n   - ‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢: 120-139/80-89\n   - ‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 1: 140-159/90-99\n   - ‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 2: ‚â• 160/100\n   - ‡∏ß‡∏¥‡∏Å‡∏§‡∏ï: > 180/110\n3. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤)\n\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:\nüìä ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: [SYS/DIA]\nüìà ‡∏£‡∏∞‡∏î‡∏±‡∏ö: [‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô]\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: [‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏±‡πâ‡∏ô‡πÜ]\n\n‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà"
            },
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": "‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞"
                },
                {
                  "type": "image_url",
                  "image_url": {
                    "url": "data:image/jpeg;base64,{{ $binary.data.data }}"
                  }
                }
              ]
            }
          ]
        },
        "options": {
          "maxTokens": 300,
          "temperature": 0.3
        }
      },
      "id": "analyzeImage",
      "name": "Analyze BP Image with GPT-4 Vision",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1050, 500],
      "credentials": {
        "openAiApi": {
          "id": "1",
          "name": "OpenAI"
        }
      },
      "description": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢ GPT-4 Vision"
    },
    {
      "parameters": {
        "jsCode": "// Format vision analysis response\nconst analysis = $json.choices[0].message.content;\nconst replyToken = $input.all()[0].json.replyToken;\nconst userId = $input.all()[0].json.userId;\n\n// Extract BP values if found\nlet bpMatch = analysis.match(/(\\d{2,3})\\/(\\d{2,3})/);\nlet logData = null;\n\nif (bpMatch) {\n  logData = {\n    bp_systolic: parseInt(bpMatch[1]),\n    bp_diastolic: parseInt(bpMatch[2]),\n    source: 'image',\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Add quick reply for follow-up\nconst messages = [\n  {\n    type: 'text',\n    text: analysis,\n    quickReply: {\n      items: [\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'üíä ‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß',\n            text: '‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞'\n          }\n        },\n        {\n          type: 'action',\n          action: {\n            type: 'message',\n            label: 'üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',\n            text: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'\n          }\n        },\n        {\n          type: 'action',\n          action: {\n            type: 'uri',\n            label: 'üìû ‡πÇ‡∏ó‡∏£‡∏´‡∏°‡∏≠',\n            uri: 'tel:1669'\n          }\n        }\n      ]\n    }\n  }\n];\n\nreturn {\n  json: {\n    replyToken: replyToken,\n    messages: messages,\n    log: logData ? {\n      type: 'vitals_image',\n      userId: userId,\n      vitals: logData\n    } : null\n  }\n};"
      },
      "id": "formatImageAnalysis",
      "name": "Format Image Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 500],
      "description": "‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤"
    }
  ],
  "connections_to_add": {
    "parseEvent": {
      "main": [
        [
          {
            "node": "ifImage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ifImage": {
      "main": [
        [
          {
            "node": "getImageFromLine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getImageFromLine": {
      "main": [
        [
          {
            "node": "analyzeImage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyzeImage": {
      "main": [
        [
          {
            "node": "formatImageAnalysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "formatImageAnalysis": {
      "main": [
        [
          {
            "node": "lineReply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}